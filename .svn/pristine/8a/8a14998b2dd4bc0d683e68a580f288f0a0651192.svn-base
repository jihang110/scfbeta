package com.ut.scf.service.factor;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ut.scf.core.util.DozerMapper;
import com.ut.scf.core.util.ScfUUID;
import com.ut.scf.dao.auto.CntRecomSelMapper;
import com.ut.scf.dao.auto.CntrctMapper;
import com.ut.scf.dao.auto.CorpInfoMapper;
import com.ut.scf.dao.auto.LimitsMapper;
import com.ut.scf.pojo.auto.CntRecomSel;
import com.ut.scf.pojo.auto.Cntrct;
import com.ut.scf.pojo.auto.CntrctExample;
import com.ut.scf.pojo.auto.Limits;
import com.ut.scf.pojo.auto.LimitsExample;
import com.ut.scf.reqbean.factor.BuyerCntrctReqBean;
import com.ut.scf.reqbean.factor.CntrctReqBean;
import com.ut.scf.service.bpm.BpmProcessService;
import com.ut.scf.service.bpm.impl.BaseBpmProcessServiceImpl;
import com.ut.scf.service.serial.SerialService;
import com.ut.scf.sys.bpm.BpmProcessContext;

/**
 * 标题、简要说明. <br>
 * 类详细说明.
 * <p>
 * Copyright: Copyright (c) 2017年6月15日 下午4:14:33
 * <p>
 * Company: 南京信雅达友田信息技术有限公司
 * <p>
 * 
 * @author wuk@starutian.com
 * @version 1.0.0
 */
@Service("buyerCntrctBpmProcessService")
public class BuyerCntrctBpmProcessService extends BaseBpmProcessServiceImpl<BuyerCntrctReqBean> implements BpmProcessService<BuyerCntrctReqBean> {

	private static final String CNTRCT_APPLY_BPM = "PubCntrctBpm";

	@Autowired
	private CntrctMapper cntrctMapper;
	
	@Autowired
	private CntRecomSelMapper cntRecomSelMapper;
	
	@Autowired
	private LimitsMapper limitsMapper;
	
	@Autowired
	private CorpInfoMapper corpInfoMapper;
	
	@Autowired
	private SerialService serialService;

	@Override
	public String getProcessDefinitionKey() {

		return CNTRCT_APPLY_BPM;
	}

	@Override
	protected void doAuditAfter(BpmProcessContext<BuyerCntrctReqBean> context) {
		// 流程结束保存正式业务数据
				if (isProcessInstanceEnded(context)) {
					add(getFormData(context));
				}
	}
	
	public String add(BuyerCntrctReqBean buyerCntrctReqBean) {
		Cntrct cntrct = new Cntrct();
		buyerCntrctReqBean.setCntTp("0");
		buyerCntrctReqBean.setRecUid(serialService.setSerial("CNTRCT"));
		DozerMapper.copy(buyerCntrctReqBean, cntrct);
		cntrctMapper.insert(cntrct);
		
		List<CntrctReqBean> list = buyerCntrctReqBean.getSellerCommList();
		for (int i = 0; i < list.size(); i++) {
			CntrctReqBean cntrctReqBean = list.get(i);
			// modify by zhangyx 20170707
			if ("1".equals(cntrctReqBean.getIsRecom())) {
				continue;
			}
			CntRecomSel cntRecomSel = new CntRecomSel();
			DozerMapper.copy(cntrctReqBean, cntRecomSel);
			cntRecomSel.setRecUid(ScfUUID.generate());
			cntRecomSel.setCntNo(buyerCntrctReqBean.getCntNo());
			cntRecomSel.setCounterPartyId(cntrctReqBean.getCustId());
			cntRecomSelMapper.insert(cntRecomSel);
		}
		
		Limits lmt = new Limits();
		LimitsExample example = new LimitsExample();
		com.ut.scf.pojo.auto.LimitsExample.Criteria criteria = example.createCriteria();
		criteria.andCorpIdEqualTo(buyerCntrctReqBean.getCustId());
		criteria.andLmtTpEqualTo("1");
		List<Limits> limitList = limitsMapper.selectByExample(example);
		Limits limits = new Limits();
		for( int i = 0 ; i < limitList.size() ; i++) {
			limits = limitList.get(i);
		}
		lmt.setRecUid(serialService.setSerial("LIMITS"));
		lmt.setCntId(buyerCntrctReqBean.getRecUid());
		lmt.setCorpId(buyerCntrctReqBean.getCustId());
		lmt.setLmtTp("2");
		lmt.setLmtSts("0");
		lmt.setParentId(limits.getRecUid());
		lmt.setLmtUsingTp(buyerCntrctReqBean.getAmtTp());
		lmt.setLmtAmt(buyerCntrctReqBean.getProductLmt());
		limitsMapper.insert(lmt);
		return cntrct.getRecUid();
	}

	public int countBy(String productId) {
		CntrctExample exam = new CntrctExample();
		CntrctExample.Criteria crit = exam.createCriteria();
		crit.andProductIdEqualTo(productId);
		crit.andCntTpEqualTo("0");// 买方
		crit.andStatusEqualTo((short) 1);
		return cntrctMapper.countByExample(exam);
	}
}
