package com.ut.scf.service.bpm;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

import org.activiti.engine.HistoryService;
import org.activiti.engine.ManagementService;
import org.activiti.engine.ProcessEngine;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.history.HistoricTaskInstance;
import org.activiti.engine.history.HistoricVariableInstance;
import org.activiti.engine.impl.interceptor.Command;
import org.activiti.engine.repository.ProcessDefinition;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.ut.scf.core.annotation.DynamicDataSource;
import com.ut.scf.core.dict.ErrorCodeEnum;
import com.ut.scf.core.dict.PageInfoBean;
import com.ut.scf.core.exception.BizException;
import com.ut.scf.dao.bpm.IActiTaskDao;
import com.ut.scf.pojo.auto.SysUser;
import com.ut.scf.reqbean.bpm.AuditHisReqBean;
import com.ut.scf.respbean.bpm.AuditHisListRespBean;
import com.ut.scf.respbean.bpm.CompletedTaskRespBean;
import com.ut.scf.respbean.bpm.TaskListRespBean;
import com.ut.scf.service.sys.UserOperService;
import com.ut.scf.sys.bpm.ActProcessInstanceDiagramCmd;
import com.ut.scf.sys.bpm.BpmConsts;
import com.ut.scf.sys.bpm.ScfGetDeploymentProcessDiagramCmd;

@Service
public class BpmCommonService {

	@Autowired
	private TaskService taskService;

	@Autowired
	private RepositoryService repositoryService;

	@Autowired
	private RuntimeService runtimeService;

	@Autowired
	private ProcessEngine processEngine;

	@Autowired
	private HistoryService historyService;

	@Autowired
	private ManagementService managementService;

	@Autowired
	private IActiTaskDao actiTaskDao;

	@Autowired
	private UserOperService userOperService;

	// 待办任务数
	public long countTodoTask(String currentUser) {
		return taskService.createTaskQuery().taskCandidateOrAssigned(currentUser).count();
	}

	// 已办任务数
	public long countDoneTask(String currentUser) {
		return historyService.createHistoricTaskInstanceQuery().taskAssignee(currentUser).finished().count();
	}

	// 待办列表查询
	@DynamicDataSource(switchTo = "dataSource_acti")
	public List<TaskListRespBean> queryToDoTaskList(Map<String, Object> params, PageInfoBean page) {
		return actiTaskDao.getTodoTaskList(params, page);
	}

	public List<AuditHisListRespBean> queryAuditHistoryList(AuditHisReqBean auditHisReqBean) {
		HistoricTaskInstance t = historyService.createHistoricTaskInstanceQuery().taskId(auditHisReqBean.getTaskId())
				.singleResult();
		List<HistoricTaskInstance> hisTaskList = historyService.createHistoricTaskInstanceQuery()
				.processInstanceId(t.getProcessInstanceId()).finished().orderByTaskCreateTime().asc().list();
		ProcessDefinition prdf = repositoryService.createProcessDefinitionQuery()
				.processDefinitionId(t.getProcessDefinitionId()).singleResult();

		List<AuditHisListRespBean> hisList = Lists.newArrayList();
		for (HistoricTaskInstance task : hisTaskList) {
			SysUser user = userOperService.getById(task.getAssignee());
			AuditHisListRespBean his = new AuditHisListRespBean();
			if (user != null) {
				his.setAuditor(user.getRealname());
			}
			his.setTaskId(task.getId());
			his.setAuditTime(task.getEndTime());
			his.setProcessDefinitionKey(prdf.getKey());
			his.setTaskName(task.getName());
			his.setOpinion(getHistoryTaskOpinion(task.getId()));
			hisList.add(his);
		}
		return hisList;
	}

	// 历史任务的审批意见
	private String getHistoryTaskOpinion(String taskId) {
		List<HistoricVariableInstance> hisOpnVarList = historyService.createHistoricVariableInstanceQuery()
				.taskId(taskId).variableNameLike(BpmConsts.OPINION_VAR_PREFFIX + "%").list();
		StringBuffer opBuf = new StringBuffer();
		for (HistoricVariableInstance var : hisOpnVarList) {
			opBuf.append(var.getValue());
		}
		return opBuf.toString();
	}

	public InputStream getProcessGraph(String processDefinitionId, String processInstanceId, String taskId) {
		Command<InputStream> cmd = null;
		if (StringUtils.isNotEmpty(processDefinitionId)) {
			cmd = new ScfGetDeploymentProcessDiagramCmd(processDefinitionId);
		} else if (StringUtils.isNotEmpty(processInstanceId)) {
			cmd = new ActProcessInstanceDiagramCmd(processInstanceId);
		} else if (StringUtils.isNotEmpty(taskId)) {
			HistoricTaskInstance task = historyService.createHistoricTaskInstanceQuery().taskId(taskId).singleResult();
			cmd = new ActProcessInstanceDiagramCmd(task.getProcessInstanceId());
		} else {
			throw new BizException(ErrorCodeEnum.BPM_ERROR);
		}
		InputStream is = managementService.executeCommand(cmd);
		return is;
	}

	@DynamicDataSource(switchTo = "dataSource_acti")
	public List<CompletedTaskRespBean> getCompletedTaskList(Map<String, Object> params, PageInfoBean page) {
		return actiTaskDao.getCompletedTaskList(params, page);
	}

}
