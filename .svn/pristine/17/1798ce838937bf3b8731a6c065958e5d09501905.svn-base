package com.ut.scf.service.factor;

import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.activiti.engine.task.Task;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.ut.scf.core.util.DozerMapper;
import com.ut.scf.core.util.ScfUUID;
import com.ut.scf.core.web.vo.LoginUser;
import com.ut.scf.dao.auto.CntrctMapper;
import com.ut.scf.dao.auto.FeeFlowMapper;
import com.ut.scf.dao.auto.FeeMapper;
import com.ut.scf.dao.auto.InvcBatchMapper;
import com.ut.scf.dao.auto.InvcInfoMapper;
import com.ut.scf.dao.factor.IInvcTransferDao;
import com.ut.scf.pojo.auto.Cntrct;
import com.ut.scf.pojo.auto.Fee;
import com.ut.scf.pojo.auto.FeeFlow;
import com.ut.scf.pojo.auto.InvcBatch;
import com.ut.scf.pojo.auto.InvcInfo;
import com.ut.scf.pojo.factor.InvoiceExt;
import com.ut.scf.reqbean.bpm.AuditShowReqBean;
import com.ut.scf.reqbean.factor.InvcInfoReqBean;
import com.ut.scf.reqbean.factor.InvcTransferReqBean;
import com.ut.scf.respbean.bpm.AuditShowRespBean;
import com.ut.scf.service.bpm.BpmProcessService;
import com.ut.scf.service.bpm.impl.BaseBpmProcessServiceImpl;
import com.ut.scf.sys.bpm.BpmProcessContext;
import com.ut.scf.sys.bpm.FormConfig;
import com.ut.scf.sys.util.ScfBizUtil;
import com.ut.scf.sys.util.ScfCacheDictUtil;

/**
 *
 */
@Service("invcTransferService")
public class InvcTransferBpmProcessService extends BaseBpmProcessServiceImpl<InvcTransferReqBean> implements BpmProcessService<InvcTransferReqBean> {

    private static final String INVC_TRANSFER_BPM = "FactorInvcTransBpm";

    @Autowired
    private InvcBatchMapper batchMapper;

    @Autowired
    private InvcInfoMapper infoMapper;

    @Autowired
    private FeeMapper feeMapper;

    @Autowired
    private FeeFlowMapper feeFlowMapper;

    @Autowired
    private CntrctMapper cntrctMapper;

    @Autowired
    private IInvcTransferDao invcTransferDao;

    @Override
    public String getProcessDefinitionKey() {
        return INVC_TRANSFER_BPM;
    }

    @Override
    public AuditShowRespBean<InvcTransferReqBean> showAudit(AuditShowReqBean auditShowReqBean,LoginUser user) {
        AuditShowRespBean<InvcTransferReqBean> respBean = super.showAudit(auditShowReqBean, user);
        Task task = taskService.createTaskQuery().taskId(auditShowReqBean.getTaskId()).singleResult();
        if (StringUtils.equals(task.getTaskDefinitionKey(), "KHJL") &&
                StringUtils.equals(respBean.getFormData().getDeduMethod(),
                        ScfCacheDictUtil.getDictMapValue("DEDU_METHOD", "转让应收账款时支付费用"))) {
            FormConfig config = respBean.getFormConfig();
            if (config == null) config = new FormConfig();
            config.setEditable(false);
            config.setEditableExclusion(new String[]{"isCharge"});
            respBean.setFormConfig(config);
        }
        return respBean;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    protected void doAuditAfter(BpmProcessContext<InvcTransferReqBean> context) {
        super.doAuditAfter(context);
        if (isProcessInstanceEnded(context)) {
            InvcTransferReqBean reqBean = getFormData(context);
            InvcBatch batch = new InvcBatch();
            DozerMapper.copy(reqBean, batch);
            String id = ScfUUID.generate();
            batch.setRecUid(id);
            batch.setBatchTp(ScfCacheDictUtil.getDictMapValue("INVC_BATCH_TYPE", "转让"));
            batchMapper.insertSelective(batch);

            // 取得卖方协议记录，判断融资申请的利息承担方是买方时，则承担方ID为卖方协议记录的交易对手ID，否则为卖方协议的客户ID
            Cntrct cnt = cntrctMapper.selectByPrimaryKey(batch.getCntId());
            String bearerId = batch.getRateBearParty().equals("1") ? cnt.getCounterPartyId() : cnt.getCustId();

            for (InvcInfoReqBean infoReqBean : reqBean.getInvList()) {
                InvcInfo info = new InvcInfo();
                DozerMapper.copy(infoReqBean, info);
                info.setTransBtcId(id);
                info.setInvStatus(ScfCacheDictUtil.getDictMapValue("INVC_STATUS", "已确认已转让"));
                if (StringUtils.isNotBlank(reqBean.getIsCharge()) && "1".equals(reqBean.getIsCharge())) {
                    info.setIsCharge(ScfCacheDictUtil.getDictMapValue("CHARGE", "已收费"));
                }
                infoMapper.updateByPrimaryKeySelective(info);

                if (StringUtils.equals(info.getIsCharge(), "1")) {
                    // 添加费用表
                    String recUid = ScfUUID.generate();
                    FeeFlow flow = new FeeFlow();
                    flow.setRecUid(ScfUUID.generate());
                    flow.setFeeUid(recUid);
                    flow.setFeeAmt(info.getCharge());
                    flow.setFeeDt(DateUtils.truncate(new Date(), Calendar.DATE));
                    flow.setFeePayFlg("1");
                    flow.setFeeType("0");
                    flow.setBusiDt(ScfBizUtil.getBusiDate());
                    feeFlowMapper.insertSelective(flow);

                    Fee fee = new Fee();
                    fee.setRecUid(recUid);
                    fee.setInvcId(info.getRecUid());
                    fee.setFeeTotalAmt(info.getCharge());
                    fee.setBearerId(bearerId);
                    fee.setBusiDt(ScfBizUtil.getBusiDate());
                    feeMapper.insertSelective(fee);
                }
            }
        }
    }

    public List<InvoiceExt> getCounterPartyList(Map<String, Object> params) {
        return invcTransferDao.getCounterPartyList(params);
    }
}
